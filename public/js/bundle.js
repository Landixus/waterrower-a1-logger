!function(e){var t={};function a(s){if(t[s])return t[s].exports;var n=t[s]={i:s,l:!1,exports:{}};return e[s].call(n.exports,n,n.exports,a),n.l=!0,n.exports}a.m=e,a.c=t,a.d=function(e,t,s){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(a.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)a.d(s,n,function(t){return e[t]}.bind(null,n));return s},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a(a.s=0)}([function(e,t,a){"use strict";a.r(t);const s=2.8;var n={calcWatt:function(e){return s/Math.pow(e,3)},sessionNameToReadable:function(e){return moment(e.slice(0,13)+":"+e.slice(13,15)+":"+e.slice(15)).format("YYYY-MM-DD hh:mm:ss")},getHeartRateColor:function(e){return e<125?"text-success":e<150?"text-primary":e<175?"text-warning":"text-danger"},getUrlParameter:function(e){var t,a,s=decodeURIComponent(window.location.search.substring(1)).split("&");for(a=0;a<s.length;a++)if((t=s[a].split("="))[0]===e)return void 0===t[1]||t[1]},fmtMSS:function(e){var t=new Date(null);return t.setSeconds(e),t.toISOString().substr(11,8)},QueryString:function(e){for(var t={},a=(e.split("?")[1]||"").split("&"),s=0;s<a.length;s++){var n=a[s].split("=");if(void 0===t[n[0]])t[n[0]]=decodeURIComponent(n[1]);else if("string"==typeof t[n[0]]){var o=[t[n[0]],decodeURIComponent(n[1])];t[n[0]]=o}else t[n[0]].push(decodeURIComponent(n[1]))}return t}},o={livePoints:[],liveMap:void 0,liveBounds:void 0};const i=[{featureType:"landscape",stylers:[{saturation:-100},{lightness:65},{visibility:"on"}]},{featureType:"poi",stylers:[{saturation:-100},{lightness:51},{visibility:"simplified"}]},{featureType:"road.highway",stylers:[{saturation:-100},{visibility:"simplified"}]},{featureType:"road.arterial",stylers:[{saturation:-100},{lightness:30},{visibility:"on"}]},{featureType:"road.local",stylers:[{saturation:-100},{lightness:40},{visibility:"on"}]},{featureType:"transit",stylers:[{saturation:-100},{visibility:"simplified"}]},{featureType:"administrative.province",stylers:[{visibility:"off"}]},{featureType:"water",elementType:"labels",stylers:[{visibility:"on"},{lightness:-25},{saturation:-100}]},{featureType:"water",elementType:"geometry",stylers:[{hue:"#ffff00"},{lightness:-25},{saturation:-97}]}];function r(){var e=document.getElementById("live-map");e&&(o.liveMap=new google.maps.Map(e,{zoom:8,maxZoom:16}),o.liveBounds=new google.maps.LatLngBounds,o.liveMap.set("styles",i))}function l(e){return new google.maps.Polyline({path:e,strokeColor:"#FF00AA",strokeOpacity:.7,strokeWeight:4})}var d=function(e,t){e&&$.ajax({type:"GET",url:"/sessions/"+e+".gpx",success:function(e){var a=[],s=new google.maps.Map(t[0],{zoom:16});s.set("styles",i);var n=new google.maps.LatLngBounds;$(e).find("trkpt").each(function(){var e=$(this).attr("lat"),t=$(this).attr("lon"),s=new google.maps.LatLng(e,t);a.push(s),n.extend(s)}),l(a).setMap(s),s.fitBounds(n)}})};var c={cleanMap:function(){r(),o.livePoints=[],l(o.livePoints).setMap(o.liveMap),"function"==typeof o.liveMap.fitBounds&&o.liveMap.fitBounds(o.liveBounds)},initMap:r,styles:i,addRouteTrackToMap:function(e,t){e&&$.ajax({type:"GET",url:"/routes/"+e,success:function(e){var a=[],s=new google.maps.Map(t[0],{zoom:8,maxZoom:16});s.set("styles",i);var n=new google.maps.LatLngBounds;e.gps.forEach(function(e){var t=e.lat,s=e.lon,o=new google.maps.LatLng(t,s);a.push(o),n.extend(o)}),l(a).setMap(s),s.fitBounds(n)}})},addGpxTrackToMap:d,loadGpxMap:function(){var e=$(this).data("name"),t=$(this).find(".card-map-top");d(e,t)},createPolyLine:l};const u=100/4.805*6,p=10;var f={RATION:u,PAGE_SIZE:p,UPDATE_FREQ:1e3,run:!1};var v={addGraph:function(e,t,a,s){for(var o=[],i=[],r=[],l=1,d=1;d<e.length;d++){var c=parseInt(e[d]),p=parseInt(s[l]),f=(c-a)/1e3,v=u/100;o.push(v/f*3.6);var m=n.calcWatt(f/v);i.push(m),r.push(6e4/(p-parseInt(s[l-1]))),a=parseInt(e[d]),c>p&&l++}var h=[],g=[],y=[],b=[],w=[],x=10;for(e.length>1e3&&(x=20);e.length;){var I,S=e.splice(0,x),k=parseInt(S.reduce(function(e,t){return e+t})/S.length);if(w.push(new Date(k).toISOString().substr(new Date(k).toISOString().lastIndexOf("T")+1,8)),t&&(I=t.splice(0,x)).length>0&&g.push(parseInt(I.reduce(function(e,t){return e+t})/I.length)),r&&(I=r.splice(0,x)).length>0&&b.push(Math.round(10*parseFloat(I.reduce(function(e,t){return e+t})/I.length))/10),o){var R=o.splice(0,x),M=i.splice(0,x);R.length>0&&h.push(Math.round(10*parseFloat(R.reduce(function(e,t){return e+t})/R.length))/10),M.length>0&&y.push(Math.round(10*parseFloat(M.reduce(function(e,t){return e+t})/M.length))/10)}}var T=$("#hr-graph"),U={labels:w,datasets:[{label:"Heart rate (bpm)",borderColor:"#dc3545",backgroundColor:"#dc3545",fill:!1,data:g,yAxisID:"y-axis-1"},{label:"Speed (km/t)",borderColor:"#007bff",backgroundColor:"#007bff",fill:!1,data:h,yAxisID:"y-axis-2"},{label:"Watt",borderColor:"#4bc0c0",backgroundColor:"#4bc0c0",fill:!1,data:y,lineTension:0,yAxisID:"y-axis-3"},{label:"Stroke rate (spm)",borderColor:"#9966FF",backgroundColor:"#9966FF",fill:!1,data:b,yAxisID:"y-axis-4"}]};Chart.Line(T,{data:U,options:{responsive:!0,hoverMode:"index",stacked:!1,scales:{yAxes:[{type:"linear",display:!0,position:"left",id:"y-axis-1",ticks:{suggestedMin:30,min:0,stepSize:5}},{type:"linear",display:!0,position:"right",id:"y-axis-2",ticks:{stepSize:2},gridLines:{drawOnChartArea:!1}},{type:"linear",display:!0,position:"right",id:"y-axis-3",ticks:{stepSize:25},gridLines:{drawOnChartArea:!1}},{type:"linear",display:!0,position:"right",id:"y-axis-4",ticks:{stepSize:2,suggestedMin:10},gridLines:{drawOnChartArea:!1}}]}}})}},m=function(e,t,a){return e+="<tr>",e+='<th scope="row">'+(t+1)+"</th>",e+='<td><a data-toggle="modal" data-route-name="'+a.name+'" data-target="#show-route-modal" href="/routes/'+a.name+'">'+a.name+"</a></td>",e+="<td>"+parseInt(a.meters)+"m</td>",e+="<td>"+a.country+"</td>",e+="<td>",!0!==a.permanent&&(e+='<a class="edit-route" href="#" data-id="'+a.name+'"><i class="material-icons">create</i></a><a class="del-route" href="#" data-id="'+a.name+'"><i aria-hidden="true" title="Delete route" class="material-icons">delete</i></a></td>'),e+="</tr>"};function h(e){$("#load").load("/route",function(){$(this).find("#routes-t").each(function(){y(0),g($("#routes-table").find(".page")[0],e)})})}function g(e,t){var a=$('<ul id="route-page" data-index="'+t+'"></ul>').addClass("pagination pagination-lg");$.get("routes/size",function(s){var n=parseInt(parseInt(s)/p)+1,o=t===n-1?"disabled":"",i=$('<li class="page-item '+(0===t?"disabled":"")+'"></li>').append('<a class="page-link" href="#" data-next="-1" tabindex="-1">Previous</a>'),r=$('<li class="page-item '+o+'"></li>').append('<a class="page-link" data-next="1" href="#">Next</a>');a.append(i);for(var l=0;l<n;l++){var d="";t===l&&(d="active");var c=$('<li class="page-item '+d+'"><a class="page-link" data-index="'+l+'" href="#">'+(l+1)+"</a></li>");a.append(c)}a.append(r),$(e).html(a)})}function y(e){var t=e*p,a=(e+1)*p-1;$.get("/routes/"+t+"/"+a,function(t){var a="",s=0;t.forEach(function(t){a=m(a,s+e*p,t),s++}),$("#routes-table-body").html(a),$("#add-route-modal").on("hidden.bs.modal",function(e){h(0)})})}function b(){var e=$("#routes").find(":selected");c.cleanMap();var t=e.data("name");c.addRouteTrackToMap(t,$("#live-map"))}var w={loadRoutes:function(){var e=this;$.get("/row/routes",function(t){var a="",s="";t.sort(function(e,t){return e.country>t.country?1:t.country>e.country?-1:0});var n='selected="selected"';t.forEach(function(e){e.country!==s&&(a+='<optgroup label="'+e.country+'">',s=e.country),a+="<option "+n+' value="'+e.index+'" data-name="'+e.name+'" data-lat="'+e.gps[0].lat+'" data-lon="'+e.gps[0].lon+'">'+e.name+" ("+e.meters+"m)</option>",n=""}),$(e).html(a),b()})},createRouteRecord:m,loadRoute:h,loadRouteTable:y,createRouteNavPage:g,editRoute:function(e){e.preventDefault();var t=$(this).data("id");$.ajax({url:"/routes/"+t,type:"GET",success:function(e){var t=$("#addRoute");t.find("#name").val(e.name),t.find("#meters").val(e.meters),t.find("#segmentId").val(e.segmentId),t.find("#countries").val(e.country);var a=JSON.stringify(e.gps);t.find("#gps").append(a),$("#add-route-modal").modal("show")}})},showRouteModal:function(e){var t=$(e.relatedTarget).data("route-name"),a=$(this);$.get("/routes/"+t,function(e){var t=e.name;e.segementId&&(t='<a target="_blank" href="https://www.strava.com/segments/'+e.segementId+'">'+t+" </a>"),a.find("#show-route-modal-title").html(t);var s='<li class="list-group-item"><h5 class="card-title">Display Lenght:</h5>'+e.meters+" m</li>";s+='<li class="list-group-item"><h5 class="card-title">Gps Lenght:</h5>'+e.gpsLenght+" m</li>",s+='<li class="list-group-item"><h5 class="card-title">Country:</h5>'+e.country+"</li>",a.find(".card .list-group").html(s)})},changeRouteSelect:b,deleteRoute:function(e){e.preventDefault();var t=$(this).data("id");confirm("Are you sure you want to delete route?")&&$.ajax({url:"/routes/"+t,type:"DELETE",success:function(e){route.loadRoute(0)}})},saveRoute:function(e){e.preventDefault();var t=$("#addRoute"),a={};a.name=t.find("#name").val(),a.meters=t.find("#meters").val(),a.stravaId=t.find("#segmentId").val(),a.country=t.find("#countries").val(),a.gps=t.find("textarea").val(),$.ajax({type:"PUT",contentType:"application/json",dataType:"json",url:"/routes/add",data:JSON.stringify(a),success:function(){$("#add-route-modal").modal("hide")}})},openRoute:function(e){e.preventDefault();var t=parseInt($(this).data("next")),a=parseInt($(this).data("index")),s=parseInt($("#route-page").data("index"));isNaN(t)?isNaN(a)||(s=a):s+=t,g($("#routes-table").find(".page")[0],s),y(s)}};var x={loadUsers:function(){var e=this;$.get("/users",function(t){var a="";t.forEach(function(e){a+='<option value="'+e.id+'">'+e.firstName+" "+e.lastName+"</option>"}),$(e).html(a)})},loadUser:function e(){$("#load").load("/user",function(){$(this).find("#users-body").each(function(){var t=this;$.get("/users/",function(a){for(var s="",n=0;n<a.length;n++){var o=a[n];s+='<tr><td><a href="#" data-id="'+o.id+'">'+(n+1)+"</a></td><td>"+o.firstName+"</td><td>"+o.lastName+"</td>",s+='<td><a class="edit-user" href="#" data-id="'+o.id+'"><i class="material-icons">create</i></a><a class="del-user" href="#" data-id="'+o.id+'"><i aria-hidden="true" title="Delete user" class="material-icons">delete</i></a></td></tr>'}$(t).html(s),$("#addUserModal").on("hidden.bs.modal",function(t){e()})})})})},editUser:function(e){e.preventDefault();var t=$(this).data("id");$.ajax({url:"/users/"+t,type:"GET",success:function(e){var t=$("#addUserForm");t.find("#firstName").val(e.firstName),t.find("#lastName").val(e.lastName),t.find("#userId").val(e.id),$.get("/strava/url",function(t){var a=t.url.replace("%24",e.id);$(".strava-url").attr("href",a)}),$(".strava-connect").removeClass("sr-only"),$("#addUserModal").modal("show")}})},saveUser:function(e){e.preventDefault();var t=$("#addUserForm"),a=t.find("#firstName").val(),s=t.find("#lastName").val(),n=t.find("#userId").val(),o={};o.firstName=a,o.lastName=s,o.id=n,$.ajax({type:"PUT",contentType:"application/json",dataType:"json",url:"/users/add",data:JSON.stringify(o),success:function(){$("#addUserModal").modal("hide")}})},deleteUser:function(e){e.preventDefault();var t=$(this).data("id");confirm("Are you sure you want to delete?")&&$.ajax({url:"/users/"+t,type:"DELETE",success:function(e){user.loadUser()}})}};function I(e){$("#load").load("/history",function(){$(this).find("#history").each(function(){$.get("/session/0/2",function(e){var t="";e.forEach(function(e){t=k(t,e)}),$("#cards").html('<div class="col"><div class="card-deck">'+t+"</div></div>"),$(".gpx-track").each(function(){$(this).trigger("load-map",this)})}),S($(this),e)})})}function S(e,t){var a=t*p,s=(t+1)*p-1;$.get("/session/"+a+"/"+s,function(a){$.get("/users",function(s){var n="",o=0,i=s.reduce(function(e,t){return e[t.id]=t,e},{});a.forEach(function(e){n=R(n,o+t*p,e,i),o++}),$("#histor-table-body").html(n),function(e,t){var a=$('<ul id="history-page" data-index="'+t+'"></ul>').addClass("pagination pagination-lg");$.get("session/size",function(s){var n=parseInt(parseInt(s)/p)+1,o=0===t?"disabled":"",i=t===n-1?"disabled":"",r=$('<li class="page-item '+o+'"></li>').append('<a class="page-link" href="#" data-next="-1" tabindex="-1">Previous</a>'),l=$('<li class="page-item '+i+'"></li>').append('<a class="page-link" data-next="1" href="#">Next</a>');a.append(r);for(var d=0;d<n;d++){var c="";t===d&&(c="active");var u=$('<li class="page-item '+c+'"><a class="page-link" data-index="'+d+'" href="#">'+(d+1)+"</a></li>");a.append(u)}a.append(l),$(e).html(a)})}(e.find(".page"),t)})})}var k=function(e,t){return e+='<div class="card gpx-track" data-name="'+t.name+'"">',e+='<div class="card-body">',e+='<div class="card-map-top "></div>',e+='<h5 class="card-title mt-2"><a class="sessions" data-name="'+t.name+'" href="/session">'+n.sessionNameToReadable(t.name)+"</a></h5>",e+='<p class="card-text">Length: '+parseInt(t.endStats.meters)+"m, Time: "+n.fmtMSS(parseInt(t.endStats.seconds))+"</p>",e+='<a href="/strava/upload/'+t.name+'" class="btn btn-primary strava btn-block">Upload to Strava</a>',e+="</div>",e+="</div>"},R=function(e,t,a,s){var o=s[a.user];return e+="<tr>",e+='<th scope="row">'+(t+1)+"</th>",e+='<td><a class="sessions" data-name="'+a.name+'" href="/?name='+a.name+'#session">'+n.sessionNameToReadable(a.name)+"</a></td>",e+="<td>Length: "+parseInt(a.endStats.meters)+"m</td>",e+=o?"<td>"+o.firstName+" "+o.lastName+"</td>":"<td></td>",e+='<td> <a href="/sessions/'+a.name+'.gpx"><i class="material-icons md-36">file_download</i><a class="strava" href="/strava/upload/'+a.name+'"><i aria-hidden="true" title="Upload to Strava" class="material-icons md-36 strava-icon">cloud_upload</i></a> <a class="del-session" href="#" data-name="'+a.name+'"><i aria-hidden="true" title="Delete session local" class="material-icons md-36">delete</i></a></td>',e+="</tr>"};var M={loadHistoryIndex:function(e){I(e)},loadHistory:I,loadHistoryList:S,openHistory:function(e){e.preventDefault();var t=parseInt($(this).data("next")),a=parseInt($(this).data("index")),s=parseInt($("#history-page").data("index"));isNaN(t)?isNaN(a)||(s=a):s+=t,S($("#history-table"),s)}};function T(e){$("#load").load("/sessions",function(){$(this).find("#routes").each(w.loadRoutes),$(this).find("#session-user").each(x.loadUsers),$(this).find("#history-session").each(function(){$.get("/session/"+e,function(t){var a=A.getHtml("History",t.endStats,!0);$("#routes").val(t.route),$("#session-user").val(t.user),a&&($("#table-content").html(a),$("#laps-body").html(U("History",t.endStats)),c.addGpxTrackToMap(e,$("#live-map"))),v.addGraph(t.raw,t.rawHr,parseInt(t.start),t.stroke)})})})}function U(e,t,a){var s="";if(parseInt(t.totalLaps)>0){var o=1,i=t.laps;a&&(i.reverse(),o=i.length),i.forEach(function(e){s+='<tr><th scope="row">'+o+"</th><td>"+parseInt(e.meters)+"</td><td>"+n.fmtMSS(parseInt(e.seconds))+"</td>",s+="<td>"+Math.round(10*parseFloat(e.watt))/10+"w</td></tr>",a?o--:o++})}return s}var N,C={loadSession:T,clickSession:function(e){e.preventDefault(),T($(this).data("name"))},getLapHtml:U,deleteSession:function(e){e.preventDefault();var t=$(this).data("name");confirm("Are you sure you want to delete session?")&&$.ajax({url:"/session/del/"+t,type:"DELETE",success:function(e){alert("Session deleted"),M.loadHistoryIndex(0,0)}})}};function D(){$("#load").load("/main",function(){$(this).find("#routes").each(w.loadRoutes),$(this).find("#session-user").each(x.loadUsers),$.get("/row/status",function(e){if("ROWING"===e.status){var t=$("#startRow");n.getUrlParameter("test")&&(t=$("#startSimulator")),L(t)}}),n.getUrlParameter("test")&&$("#startRow").attr("id","startSimulator")})}function L(e){$(window).scrollTop($("#main").offset().top),E(!0,"Rowing"),c.cleanMap(),$("#routes").attr("disabled","disabled"),$("#session-user").attr("disabled","disabled"),$("#startSimulator").attr("disabled","disabled"),$(e).attr("disabled","disabled"),$(e).html("Rowing..."),$(e).addClass("d-none"),$("#stopRow").removeClass("d-none")}function E(e,t){f.run=e,$.get("/row",function(e){var a=P(t,e);if(a){$("#table-content").html(a),$("#laps-body").html(C.getLapHtml(t,e,!0));var s=e.gps.lat,n=e.gps.lon,i=new google.maps.LatLng(s,n);if(o.livePoints.push(i),o.liveBounds)o.liveBounds.extend(i),c.createPolyLine(o.livePoints).setMap(o.liveMap),o.liveMap.fitBounds(o.liveBounds)}}).done(function(){f.run&&(N=setTimeout(function(){E(!0,t)},f.UPDATE_FREQ))})}function P(e,t,a){if(0!==parseInt(t.meters)){var s="";return a&&(s+='<div class="row"><div class="col-sm-4">Day</div><div class="col">'+t.start.substr(2,t.start.lastIndexOf("T")-2)+"</div></div>"),s+='<div class="row"><div class="col-sm-4">Start:</div><div class="col">'+t.start.substr(t.start.lastIndexOf("T")+1,8)+"</div></div>",s+='<div class="row"><div class="col-sm-4">Time:</div><div class="col">'+n.fmtMSS(parseInt(t.seconds))+"</div></div>",s+='<div class="row"><div class="col-sm-4">Length:</div><div class="col">'+parseInt(t.meters)+" m ("+parseInt(t.routeLap)+")</div></div>",s+='<div class="row"><div class="col-sm-4">Pace:</div><div class="col">'+Math.round(3.6*parseFloat(t.pace)*10)/10+" km/t</div></div>",s+='<div class="row"><div class="col-sm-4">500m:</div><div class="col">'+n.fmtMSS(parseInt(t.lapPace))+"</div></div>",s+='<div class="row"><div class="col-sm-4">2k:</div><div class="col">'+n.fmtMSS(parseInt(t.towKPace))+"</div></div>",s+='<div class="row"><div class="col-sm-4">Avg.W:</div><div class="col">'+Math.round(10*parseFloat(t.watt))/10+"w</div></div>",s+='<div class="row"><div class="col-sm-4">SR:</div><div class="col">'+Math.round(10*parseFloat(t.stroke))/10+"</div></div>",parseInt(t.hr)>0&&(s+='<div class="row"><div class="col-sm-4">HR:</div><div class="col '+n.getHeartRateColor(parseInt(t.hr))+'">'+parseInt(t.hr)+(parseInt(t.avgHr)>0?"("+parseInt(t.avgHr)+")":"")+"</div></div>"),t.fileName&&(s+='<div class="row"><div class="col">Actions:</div><div class="col"><a href="/sessions/'+t.fileName,s+='"><i class="material-icons">file_download</i><a class="strava" href="/strava/upload/'+t.name,s+='"><i aria-hidden="true" title="Upload to strava" class="material-icons">cloud_upload</i></a>',s+='<a class="sessions" data-name="'+t.name+'" href="/sessions"><i aria-hidden="true" title="Session" class="material-icons">fiber_new</i></a></div></div>'),s+""}}var A={loadMain:D,start:L,get_rowInfo:E,getHtml:P,startRow:function(e){e.preventDefault();var t=$("#routes").val(),a=this;$.get("/row/start",{routes:t},function(){L(a)})},stopRow:function(e){e.preventDefault();var t=$(this);clearTimeout(N),f.run=!1;var a=$("#routes").val(),s=$("#session-user").val();$.get("/row/stop",{routes:a,user:s},function(e){$("#table-content").html(P(0,e,!1));var a=$("#startRow");a.removeAttr("disabled"),a.removeClass("d-none"),a.html("Start row"),t.addClass("d-none"),$("#routes").removeAttr("disabled"),$("#session-user").removeAttr("disabled"),$("#startSimulator").removeAttr("disabled")})},load:function(){switch(window.location.hash){case"#route":w.loadRoute(0);break;case"#user":x.loadUser();break;case"#history":M.loadHistory(0);break;case"#session":C.loadSession(n.QueryString.name);break;default:D()}},uploadToStrava:function(e){e.preventDefault();var t=$(this).attr("href");$.get(t,function(e){console.log(e),alert("Uploaded to strava!")})}};window.QueryString=function(){for(var e={},t=window.location.search.substring(1).split("&"),a=0;a<t.length;a++){var s=t[a].split("=");if(void 0===e[s[0]])e[s[0]]=decodeURIComponent(s[1]);else if("string"==typeof e[s[0]]){var n=[e[s[0]],decodeURIComponent(s[1])];e[s[0]]=n}else e[s[0]].push(decodeURIComponent(s[1]))}return e}(),$(function(){A.get_rowInfo(!1,""),$(document).on("click",".main",function(e){A.loadMain()}),$(document).on("click","#user",function(e){x.loadUser()}),$(document).on("click","#history-page a",M.openHistory),$(document).on("click","#route-page a",w.openRoute),$(document).on("click",".nav-link",function(e){$("#main-nav").find(".nav-item").each(function(){$(this).removeClass("active")}),$(this).parent().addClass("active")}),$(document).on("click",".sessions",C.clickSession),$(document).on("click","a#history",function(e){M.loadHistoryIndex(0,0)}),$(document).on("click","a#route",function(e){w.loadRoute(0)}),$(document).on("load-map",".gpx-track",c.loadGpxMap),$(document).on("click","button#startRow",A.startRow),$(document).on("click","button#stopRow",A.stopRow),$(document).on("click",".edit-user",x.editUser),$(document).on("click",".edit-route",w.editRoute),$(document).on("click",".strava",A.uploadToStrava),$(document).on("click",".del-session",C.deleteSession),$(document).on("click","#save-route",w.saveRoute),$(document).on("click","#save-user",x.saveUser),$(document).on("click",".del-user",x.deleteUser),$(document).on("click",".del-route",w.deleteRoute),$("#load").each(A.load),$("#routes").each(w.loadRoutes),$("#session-user").each(x.loadUsers),$(document).on("show.bs.modal","#show-route-modal",w.showRouteModal),$(document).on("shown.bs.modal","#show-route-modal",function(e){var t=$(e.relatedTarget).data("route-name");c.addRouteTrackToMap(t,$("#live-route-map"))}),$(document).on("change","#routes",w.changeRouteSelect)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,