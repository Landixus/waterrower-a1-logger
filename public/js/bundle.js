!function(t){var e={};function a(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,a),n.l=!0,n.exports}a.m=t,a.c=e,a.d=function(t,e,s){a.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},a.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},a.t=function(t,e){if(1&e&&(t=a(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(a.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)a.d(s,n,function(e){return t[e]}.bind(null,n));return s},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,"a",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p="",a(a.s=0)}([function(t,e,a){"use strict";a.r(e);const s=2.8;var n={calcWatt:function(t){return s/Math.pow(t,3)},sessionNameToReadable:function(t){return moment(t.slice(0,13)+":"+t.slice(13,15)+":"+t.slice(15)).format("YYYY-MM-DD hh:mm:ss")},getHeartRateColor:function(t){return t<125?"text-success":t<150?"text-primary":t<175?"text-warning":"text-danger"},getUrlParameter:function(t){var e,a,s=decodeURIComponent(window.location.search.substring(1)).split("&");for(a=0;a<s.length;a++)if((e=s[a].split("="))[0]===t)return void 0===e[1]||e[1]},fmtMSS:function(t){var e=new Date(null);return e.setSeconds(t),e.toISOString().substr(11,8)}};const i=100/4.805*6,o=10,r=1e3;var l={livePoints:[],liveMap:{},liveBounds:{}};const d=[{featureType:"landscape",stylers:[{saturation:-100},{lightness:65},{visibility:"on"}]},{featureType:"poi",stylers:[{saturation:-100},{lightness:51},{visibility:"simplified"}]},{featureType:"road.highway",stylers:[{saturation:-100},{visibility:"simplified"}]},{featureType:"road.arterial",stylers:[{saturation:-100},{lightness:30},{visibility:"on"}]},{featureType:"road.local",stylers:[{saturation:-100},{lightness:40},{visibility:"on"}]},{featureType:"transit",stylers:[{saturation:-100},{visibility:"simplified"}]},{featureType:"administrative.province",stylers:[{visibility:"off"}]},{featureType:"water",elementType:"labels",stylers:[{visibility:"on"},{lightness:-25},{saturation:-100}]},{featureType:"water",elementType:"geometry",stylers:[{hue:"#ffff00"},{lightness:-25},{saturation:-97}]}];function c(){l.liveMap=new google.maps.Map(document.getElementById("live-map"),{zoom:8,maxZoom:16}),l.liveBounds=new google.maps.LatLngBounds,l.liveMap.set("styles",d)}function u(t){return new google.maps.Polyline({path:t,strokeColor:"#FF00AA",strokeOpacity:.7,strokeWeight:4})}var p={cleanMap:function(){c(),l.livePoints=[],u(l.livePoints).setMap(l.liveMap),l.liveMap.fitBounds(l.liveBounds)},initMap:c,styles:d,createPolyLine:u},f={loadRoutes:function(){var t=this;$.get("/row/routes",function(e){var a="",s="";e.sort(function(t,e){return t.country>e.country?1:e.country>t.country?-1:0});var n='selected="selected"';e.forEach(function(t){t.country!==s&&(a+='<optgroup label="'+t.country+'">',s=t.country),a+="<option "+n+' value="'+t.index+'" data-lat="'+t.gps[0].lat+'" data-lon="'+t.gps[0].lon+'">'+t.name+" ("+t.meters+"m)</option>",n=""}),$(t).html(a),n=$("#routes").find(":selected"),p.cleanMap();var i=new google.maps.LatLng($(n).data("lat"),$(n).data("lon"));l.liveMap.panTo(i)})}};var v={loadUsers:function(){var t=this;$.get("/users",function(e){var a="";e.forEach(function(t){a+='<option value="'+t.id+'">'+t.firstName+" "+t.lastName+"</option>"}),$(t).html(a)})},loadUser:function t(){$("#load").load("/user",function(){$(this).find("#users-body").each(function(){var e=this;$.get("/users/",function(a){for(var s="",n=0;n<a.length;n++){var i=a[n];s+='<tr><td><a href="#" data-id="'+i.id+'">'+(n+1)+"</a></td><td>"+i.firstName+"</td><td>"+i.lastName+"</td>",s+='<td><a class="edit-user" href="#" data-id="'+i.id+'"><i class="material-icons">create</i></a><a class="del-user" href="#" data-id="'+i.id+'"><i aria-hidden="true" title="Delete user" class="material-icons">delete</i></a></td></tr>'}$(e).html(s),$("#addUserModal").on("hidden.bs.modal",function(e){t()})})})})}};var m={loadMain:function(){$("#load").load("/main",function(){$(this).find("#routes").each(f.loadRoutes),$(this).find("#session-user").each(v.loadUsers),$.get("/row/status",function(t){if("ROWING"===t.status){var e=$("#startRow");n.getUrlParameter("test")&&(e=$("#startSimulator")),start(e)}}),n.getUrlParameter("test")&&$("#startRow").attr("id","startSimulator")})}};function h(t){$("#load").load("/history",function(){$(this).find("#history").each(function(){$.get("/session/0/2",function(t){var e="";t.forEach(function(t){e=y(e,t)}),$("#cards").html('<div class="col"><div class="card-deck">'+e+"</div></div>"),$(".gpx-track").each(function(){$(this).trigger("load-map",this)})}),g($(this),t)})})}function g(t,e){var a=e*o,s=(e+1)*o-1;$.get("/session/"+a+"/"+s,function(a){$.get("/users",function(s){var n="",i=0,r=s.reduce(function(t,e){return t[e.id]=e,t},{});a.forEach(function(t){n=b(n,i+e*o,t,r),i++}),$("#histor-table-body").html(n),function(t,e){var a=$('<ul id="history-page" data-index="'+e+'"></ul>').addClass("pagination pagination-lg");$.get("session/size",function(s){var n=parseInt(parseInt(s)/o)+1,i=0===e?"disabled":"",r=e===n-1?"disabled":"",l=$('<li class="page-item '+i+'"></li>').append('<a class="page-link" href="#" data-next="-1" tabindex="-1">Previous</a>'),d=$('<li class="page-item '+r+'"></li>').append('<a class="page-link" data-next="1" href="#">Next</a>');a.append(l);for(var c=0;c<n;c++){var u="";e===c&&(u="active");var p=$('<li class="page-item '+u+'"><a class="page-link" data-index="'+c+'" href="#">'+(c+1)+"</a></li>");a.append(p)}a.append(d),$(t).html(a)})}(t.find(".page"),e)})})}var y=function(t,e){return t+='<div class="card gpx-track" data-name="'+e.name+'"">',t+='<div class="card-body">',t+='<div class="card-map-top "></div>',t+='<h5 class="card-title mt-2"><a class="sessions" data-name="'+e.name+'" href="/session">'+n.sessionNameToReadable(e.name)+"</a></h5>",t+='<p class="card-text">Length: '+parseInt(e.endStats.meters)+"m, Time: "+n.fmtMSS(parseInt(e.endStats.seconds))+"</p>",t+='<a href="/strava/upload/'+e.name+'" class="btn btn-primary strava btn-block">Upload to Strava</a>',t+="</div>",t+="</div>"},b=function(t,e,a,s){var i=s[a.user];return t+="<tr>",t+='<th scope="row">'+(e+1)+"</th>",t+='<td><a class="sessions" data-name="'+a.name+'" href="/?name='+a.name+'#session">'+n.sessionNameToReadable(a.name)+"</a></td>",t+="<td>Length: "+parseInt(a.endStats.meters)+"m</td>",t+=i?"<td>"+i.firstName+" "+i.lastName+"</td>":"<td></td>",t+='<td> <a href="/sessions/'+a.name+'.gpx"><i class="material-icons md-36">file_download</i><a class="strava" href="/strava/upload/'+a.name+'"><i aria-hidden="true" title="Upload to Strava" class="material-icons md-36">cloud_upload</i></a> <a class="del-session" href="#" data-name="'+a.name+'"><i aria-hidden="true" title="Delete session local" class="material-icons md-36">delete</i></a></td>',t+="</tr>"};var w,x={loadHistoryIndex:function(t){h(t)},loadHistory:h,loadHistoryList:g},I=!1;function k(t){for(var e={},a=(t.split("?")[1]||""||"").split("&"),s=0;s<a.length;s++){var n=a[s].split("=");if(void 0===e[n[0]])e[n[0]]=decodeURIComponent(n[1]);else if("string"==typeof e[n[0]]){var i=[e[n[0]],decodeURIComponent(n[1])];e[n[0]]=i}else e[n[0]].push(decodeURIComponent(n[1]))}return e}function S(t,e){I=t,$.get("/row",function(t){var a=M(e,t);if(a){$("#table-content").html(a),$("#laps-body").html(T(e,t,!0));var s=t.gps.lat,n=t.gps.lon,i=new google.maps.LatLng(s,n);if(l.livePoints.push(i),l.liveBounds)l.liveBounds.extend(i),p.createPolyLine(l.livePoints).setMap(l.liveMap),l.liveMap.fitBounds(l.liveBounds)}}).done(function(){I&&(w=setTimeout(function(){S(!0,e)},r))})}function M(t,e,a){if(0!==parseInt(e.meters)){var s="";return a&&(s+='<div class="row"><div class="col-sm-4">Day</div><div class="col">'+e.start.substr(2,e.start.lastIndexOf("T")-2)+"</div></div>"),s+='<div class="row"><div class="col-sm-4">Start:</div><div class="col">'+e.start.substr(e.start.lastIndexOf("T")+1,8)+"</div></div>",s+='<div class="row"><div class="col-sm-4">Time:</div><div class="col">'+n.fmtMSS(parseInt(e.seconds))+"</div></div>",s+='<div class="row"><div class="col-sm-4">Length:</div><div class="col">'+parseInt(e.meters)+" m ("+parseInt(e.routeLap)+")</div></div>",s+='<div class="row"><div class="col-sm-4">Pace:</div><div class="col">'+Math.round(3.6*parseFloat(e.pace)*10)/10+" km/t</div></div>",s+='<div class="row"><div class="col-sm-4">500m:</div><div class="col">'+n.fmtMSS(parseInt(e.lapPace))+"</div></div>",s+='<div class="row"><div class="col-sm-4">2k:</div><div class="col">'+n.fmtMSS(parseInt(e.towKPace))+"</div></div>",s+='<div class="row"><div class="col-sm-4">Avg.W:</div><div class="col">'+Math.round(10*parseFloat(e.watt))/10+"w</div></div>",s+='<div class="row"><div class="col-sm-4">SR:</div><div class="col">'+Math.round(10*parseFloat(e.stroke))/10+"</div></div>",parseInt(e.hr)>0&&(s+='<div class="row"><div class="col-sm-4">HR:</div><div class="col '+n.getHeartRateColor(parseInt(e.hr))+'">'+parseInt(e.hr)+(parseInt(e.avgHr)>0?"("+parseInt(e.avgHr)+")":"")+"</div></div>"),e.fileName&&(s+='<div class="row"><div class="col">Actions:</div><div class="col"><a href="/sessions/'+e.fileName,s+='"><i class="material-icons">file_download</i><a class="strava" href="/strava/upload/'+e.name,s+='"><i aria-hidden="true" title="Upload to strava" class="material-icons">cloud_upload</i></a>',s+='<a class="sessions" data-name="'+e.name+'" href="/sessions"><i aria-hidden="true" title="Session" class="material-icons">fiber_new</i></a></div></div>'),s+""}}function T(t,e,a){var s="";if(parseInt(e.totalLaps)>0){var i=1,o=e.laps;a&&(o.reverse(),i=o.length),o.forEach(function(t){s+='<tr><th scope="row">'+i+"</th><td>"+parseInt(t.meters)+"</td><td>"+n.fmtMSS(parseInt(t.seconds))+"</td>",s+="<td>"+Math.round(10*parseFloat(t.watt))/10+"w</td></tr>",a?i--:i++})}return s}window.QueryString=function(){for(var t={},e=window.location.search.substring(1).split("&"),a=0;a<e.length;a++){var s=e[a].split("=");if(void 0===t[s[0]])t[s[0]]=decodeURIComponent(s[1]);else if("string"==typeof t[s[0]]){var n=[t[s[0]],decodeURIComponent(s[1])];t[s[0]]=n}else t[s[0]].push(decodeURIComponent(s[1]))}return t}(),$(function(){function t(t){$("#load").load("/sessions",function(){$(this).find("#routes").each(f.loadRoutes),$(this).find("#session-user").each(v.loadUsers),$(this).find("#history-session").each(function(){$.get("/session/"+t,function(e){var a=M("History",e.endStats,!0);$("#routes").val(e.route),$("#session-user").val(e.user),a&&($("#table-content").html(a),$("#laps-body").html(T("History",e.endStats)),N(t,$("#live-map"))),function(t,e,a,s){for(var o=[],r=[],l=[],d=1,c=1;c<t.length;c++){var u=parseInt(t[c]),p=parseInt(s[d]),f=(u-a)/1e3,v=i/100;o.push(v/f*3.6);var m=n.calcWatt(f/v);r.push(m),l.push(6e4/(p-parseInt(s[d-1]))),a=parseInt(t[c]),u>p&&d++}var h=[],g=[],y=[],b=[],w=[],x=10;t.length>1e3&&(x=20);for(;t.length;){var I=t.splice(0,x),k=parseInt(I.reduce(function(t,e){return t+e})/I.length);if(w.push(new Date(k).toISOString().substr(new Date(k).toISOString().lastIndexOf("T")+1,8)),e){var S=e.splice(0,x);S.length>0&&g.push(parseInt(S.reduce(function(t,e){return t+e})/S.length))}if(l){var S=l.splice(0,x);S.length>0&&b.push(Math.round(10*parseFloat(S.reduce(function(t,e){return t+e})/S.length))/10)}if(o){var M=o.splice(0,x),T=r.splice(0,x);M.length>0&&h.push(Math.round(10*parseFloat(M.reduce(function(t,e){return t+e})/M.length))/10),T.length>0&&y.push(Math.round(10*parseFloat(T.reduce(function(t,e){return t+e})/T.length))/10)}}var L=$("#hr-graph"),N={labels:w,datasets:[{label:"Heart rate (bpm)",borderColor:"#dc3545",backgroundColor:"#dc3545",fill:!1,data:g,yAxisID:"y-axis-1"},{label:"Speed (km/t)",borderColor:"#007bff",backgroundColor:"#007bff",fill:!1,data:h,yAxisID:"y-axis-2"},{label:"Watt",borderColor:"#4bc0c0",backgroundColor:"#4bc0c0",fill:!1,data:y,lineTension:0,yAxisID:"y-axis-3"},{label:"Stroke rate (spm)",borderColor:"#9966FF",backgroundColor:"#9966FF",fill:!1,data:b,yAxisID:"y-axis-4"}]};Chart.Line(L,{data:N,options:{responsive:!0,hoverMode:"index",stacked:!1,scales:{yAxes:[{type:"linear",display:!0,position:"left",id:"y-axis-1",ticks:{suggestedMin:30,min:0,stepSize:5}},{type:"linear",display:!0,position:"right",id:"y-axis-2",ticks:{stepSize:2},gridLines:{drawOnChartArea:!1}},{type:"linear",display:!0,position:"right",id:"y-axis-3",ticks:{stepSize:25},gridLines:{drawOnChartArea:!1}},{type:"linear",display:!0,position:"right",id:"y-axis-4",ticks:{stepSize:2,suggestedMin:10},gridLines:{drawOnChartArea:!1}}]}}})}(e.raw,e.rawHr,parseInt(e.start),e.stroke)})})})}function e(t,e){var a=$('<ul id="route-page" data-index="'+e+'"></ul>').addClass("pagination pagination-lg");$.get("routes/size",function(s){var n=parseInt(parseInt(s)/o)+1,i=e===n-1?"disabled":"",r=$('<li class="page-item '+(0===e?"disabled":"")+'"></li>').append('<a class="page-link" href="#" data-next="-1" tabindex="-1">Previous</a>'),l=$('<li class="page-item '+i+'"></li>').append('<a class="page-link" data-next="1" href="#">Next</a>');a.append(r);for(var d=0;d<n;d++){var c="";e===d&&(c="active");var u=$('<li class="page-item '+c+'"><a class="page-link" data-index="'+d+'" href="#">'+(d+1)+"</a></li>");a.append(u)}a.append(l),$(t).html(a)})}S(!1,""),$(document).on("click",".main",function(t){loadMain()});function a(t){$("#load").load("/route",function(){$(this).find("#routes-t").each(function(){s(0),e($("#routes-table").find(".page")[0],t)})})}function s(t){var e=t*o,s=(t+1)*o-1;$.get("/routes/"+e+"/"+s,function(e){var s="",n=0;e.forEach(function(e){s=L(s,n+t*o,e),n++}),$("#routes-table-body").html(s),$("#add-route-modal").on("hidden.bs.modal",function(t){a(0)})})}$(document).on("click","#user",function(t){v.loadUser()}),$(document).on("click","#history-page a",function(t){t.preventDefault();var e=parseInt($(this).data("next")),a=parseInt($(this).data("index")),s=parseInt($("#history-page").data("index"));isNaN(e)?isNaN(a)||(s=a):s+=e,x.loadHistoryList($("#history-table"),s)}),$(document).on("click","#route-page a",function(t){t.preventDefault();var a=parseInt($(this).data("next")),n=parseInt($(this).data("index")),i=parseInt($("#route-page").data("index"));isNaN(a)?isNaN(n)||(i=n):i+=a,e($("#routes-table").find(".page")[0],i),s(i)}),$(document).on("click",".nav-link",function(t){$("#main-nav").find(".nav-item").each(function(){$(this).removeClass("active")}),$(this).parent().addClass("active")}),$(document).on("click",".sessions",function(e){e.preventDefault(),t($(this).data("name"))}),$(document).on("click","a#history",function(t){x.loadHistoryIndex(0,0)}),$(document).on("click","a#route",function(t){a(0)}),$(document).on("load-map",".gpx-track",function(){var t=$(this).data("name"),e=$(this).find(".card-map-top");N(t,e)}),$(document).on("click","button#startRow",function(t){t.preventDefault();var e=$("#routes").val(),a=this;$.get("/row/start",{routes:e},function(){!function(t){$(window).scrollTop($("#main").offset().top),S(!0,"Rowing"),p.cleanMap(),$("#routes").attr("disabled","disabled"),$("#session-user").attr("disabled","disabled"),$("#startSimulator").attr("disabled","disabled"),$(t).attr("disabled","disabled"),$(t).html("Rowing..."),$(t).addClass("d-none"),$("#stopRow").removeClass("d-none")}(a)})}),$(document).on("click","button#stopRow",function(t){t.preventDefault();var e=$(this);clearTimeout(w),I=!1;var a=$("#routes").val(),s=$("#session-user").val();$.get("/row/stop",{routes:a,user:s},function(t){$("#table-content").html(M("Stopped",t,!1));var a=$("#startRow");a.removeAttr("disabled"),a.removeClass("d-none"),a.html("Start row"),e.addClass("d-none"),$("#routes").removeAttr("disabled"),$("#session-user").removeAttr("disabled"),$("#startSimulator").removeAttr("disabled")})}),$(document).on("click",".edit-user",function(t){t.preventDefault();var e=$(this).data("id");$.ajax({url:"/users/"+e,type:"GET",success:function(t){var e=$("#addUserForm");e.find("#firstName").val(t.firstName),e.find("#lastName").val(t.lastName),e.find("#userId").val(t.id),$.get("/strava/url",function(e){var a=e.url.replace("%24",t.id);$(".strava-url").attr("href",a)}),$(".strava-connect").removeClass("sr-only"),$("#addUserModal").modal("show")}})}),$(document).on("click",".edit-route",function(t){t.preventDefault();var e=$(this).data("id");$.ajax({url:"/routes/"+e,type:"GET",success:function(t){var e=$("#addRoute");e.find("#name").val(t.name),e.find("#meters").val(t.meters),e.find("#segmentId").val(t.segmentId),e.find("#countries").val(t.country);var a=JSON.stringify(t.gps);e.find("#gps").append(a),$("#add-route-modal").modal("show")}})}),$(document).on("click",".strava",function(t){t.preventDefault();var e=$(this).attr("href");$.get(e,function(t){console.log(t),alert("Uploaded to strava!")})}),$(document).on("click",".del-session",function(t){t.preventDefault();var e=$(this).data("name");confirm("Are you sure you want to delete session?")&&$.ajax({url:"/session/del/"+e,type:"DELETE",success:function(t){alert("Session deleted"),x.loadHistoryIndex(0,0)}})}),$(document).on("click","#save-route",function(t){t.preventDefault();var e=$("#addRoute"),a={};a.name=e.find("#name").val(),a.meters=e.find("#meters").val(),a.stravaId=e.find("#segmentId").val(),a.country=e.find("#countries").val(),a.gps=e.find("textarea").val(),$.ajax({type:"PUT",contentType:"application/json",dataType:"json",url:"/routes/add",data:JSON.stringify(a),success:function(){$("#add-route-modal").modal("hide")}})}),$(document).on("click","#save-user",function(t){t.preventDefault();var e=$("#addUserForm"),a=e.find("#firstName").val(),s=e.find("#lastName").val(),n=e.find("#userId").val(),i={};i.firstName=a,i.lastName=s,i.id=n,$.ajax({type:"PUT",contentType:"application/json",dataType:"json",url:"/users/add",data:JSON.stringify(i),success:function(){$("#addUserModal").modal("hide")}})}),$(document).on("click",".del-user",function(t){t.preventDefault();var e=$(this).data("id");confirm("Are you sure you want to delete?")&&$.ajax({url:"/users/"+e,type:"DELETE",success:function(t){v.loadUser()}})}),$(document).on("click",".del-route",function(t){t.preventDefault();var e=$(this).data("id");confirm("Are you sure you want to delete route?")&&$.ajax({url:"/routes/"+e,type:"DELETE",success:function(t){a(0)}})}),$("#load").each(function(){switch(window.location.hash){case"#route":a(0);break;case"#user":v.loadUser();break;case"#history":x.loadHistory(0);break;case"#session":t(k.name);break;default:m.loadMain()}}),$("#routes").each(f.loadRoutes),$("#session-user").each(v.loadUsers),$(document).on("show.bs.modal","#show-route-modal",function(t){var e=$(t.relatedTarget).data("route-name"),a=$(this);$.get("/routes/"+e,function(t){var e=t.name;t.segementId&&(e='<a target="_blank" href="https://www.strava.com/segments/'+t.segementId+'">'+e+" </a>"),a.find("#show-route-modal-title").html(e);var s='<li class="list-group-item"><h5 class="card-title">Display Lenght:</h5>'+t.meters+" m</li>";s+='<li class="list-group-item"><h5 class="card-title">Gps Lenght:</h5>'+t.gpsLenght+" m</li>",s+='<li class="list-group-item"><h5 class="card-title">Country:</h5>'+t.country+"</li>",a.find(".card .list-group").html(s)})}),$(document).on("shown.bs.modal","#show-route-modal",function(t){var e=$(t.relatedTarget).data("route-name");C(e,$("#live-route-map"))}),$(document).on("change","#routes",function(t){var e=$("#routes").find(":selected");p.cleanMap();var a=new google.maps.LatLng($(e).data("lat"),$(e).data("lon"));l.liveMap.panTo(a)})});var L=function(t,e,a){return t+="<tr>",t+='<th scope="row">'+(e+1)+"</th>",t+='<td><a data-toggle="modal" data-route-name="'+a.name+'" data-target="#show-route-modal" href="/routes/'+a.name+'">'+a.name+"</a></td>",t+="<td>"+parseInt(a.meters)+"m</td>",t+="<td>"+a.country+"</td>",t+="<td>",!0!==a.permanent&&(t+='<a class="edit-route" href="#" data-id="'+a.name+'"><i class="material-icons">create</i></a><a class="del-route" href="#" data-id="'+a.name+'"><i aria-hidden="true" title="Delete route" class="material-icons">delete</i></a></td>'),t+="</tr>"},N=function(t,e){t&&$.ajax({type:"GET",url:"/sessions/"+t+".gpx",success:function(t){var a=[],s=new google.maps.Map(e[0],{zoom:16});s.set("styles",p.styles);var n=new google.maps.LatLngBounds;$(t).find("trkpt").each(function(){var t=$(this).attr("lat"),e=$(this).attr("lon"),s=new google.maps.LatLng(t,e);a.push(s),n.extend(s)}),p.createPolyLine(a).setMap(s),s.fitBounds(n)}})},C=function(t,e){t&&$.ajax({type:"GET",url:"/routes/"+t,success:function(t){var a=[],s=new google.maps.Map(e[0],{zoom:8,maxZoom:16});s.set("styles",p.styles);var n=new google.maps.LatLngBounds;t.gps.forEach(function(t){var e=t.lat,s=t.lon,i=new google.maps.LatLng(e,s);a.push(i),n.extend(i)}),p.createPolyLine(a).setMap(s),s.fitBounds(n)}})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,