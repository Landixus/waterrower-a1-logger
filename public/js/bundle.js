!function(t){var e={};function a(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,a),n.l=!0,n.exports}a.m=t,a.c=e,a.d=function(t,e,s){a.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},a.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},a.t=function(t,e){if(1&e&&(t=a(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(a.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)a.d(s,n,function(e){return t[e]}.bind(null,n));return s},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,"a",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p="",a(a.s=0)}([function(t,e,a){"use strict";a.r(e);const s=2.8;var n={calcWatt:function(t){return s/Math.pow(t,3)},sessionNameToReadable:function(t){return moment(t.slice(0,13)+":"+t.slice(13,15)+":"+t.slice(15)).format("YYYY-MM-DD hh:mm:ss")},getHeartRateColor:function(t){return t<125?"text-success":t<150?"text-primary":t<175?"text-warning":"text-danger"},getUrlParameter:function(t){var e,a,s=decodeURIComponent(window.location.search.substring(1)).split("&");for(a=0;a<s.length;a++)if((e=s[a].split("="))[0]===t)return void 0===e[1]||e[1]},fmtMSS:function(t){var e=new Date(null);return e.setSeconds(t),e.toISOString().substr(11,8)},QueryString:function(t){for(var e={},a=(t.split("?")[1]||"").split("&"),s=0;s<a.length;s++){var n=a[s].split("=");if(void 0===e[n[0]])e[n[0]]=decodeURIComponent(n[1]);else if("string"==typeof e[n[0]]){var i=[e[n[0]],decodeURIComponent(n[1])];e[n[0]]=i}else e[n[0]].push(decodeURIComponent(n[1]))}return e}},i={livePoints:[],liveMap:void 0,liveBounds:void 0};const o=[{featureType:"landscape",stylers:[{saturation:-100},{lightness:65},{visibility:"on"}]},{featureType:"poi",stylers:[{saturation:-100},{lightness:51},{visibility:"simplified"}]},{featureType:"road.highway",stylers:[{saturation:-100},{visibility:"simplified"}]},{featureType:"road.arterial",stylers:[{saturation:-100},{lightness:30},{visibility:"on"}]},{featureType:"road.local",stylers:[{saturation:-100},{lightness:40},{visibility:"on"}]},{featureType:"transit",stylers:[{saturation:-100},{visibility:"simplified"}]},{featureType:"administrative.province",stylers:[{visibility:"off"}]},{featureType:"water",elementType:"labels",stylers:[{visibility:"on"},{lightness:-25},{saturation:-100}]},{featureType:"water",elementType:"geometry",stylers:[{hue:"#ffff00"},{lightness:-25},{saturation:-97}]}];function r(){var t=document.getElementById("live-map");t&&(i.liveMap=new google.maps.Map(t,{zoom:8,maxZoom:16}),i.liveBounds=new google.maps.LatLngBounds,i.liveMap.set("styles",o))}function l(t){return new google.maps.Polyline({path:t,strokeColor:"#FF00AA",strokeOpacity:.7,strokeWeight:4})}var d=function(t,e){t&&$.ajax({type:"GET",url:"/sessions/"+t+".gpx",success:function(t){var a=[],s=new google.maps.Map(e[0],{zoom:16});s.set("styles",o);var n=new google.maps.LatLngBounds;$(t).find("trkpt").each(function(){var t=$(this).attr("lat"),e=$(this).attr("lon"),s=new google.maps.LatLng(t,e);a.push(s),n.extend(s)}),l(a).setMap(s),s.fitBounds(n)}})};var c={cleanMap:function(){r(),i.livePoints=[],l(i.livePoints).setMap(i.liveMap),"function"==typeof i.liveMap.fitBounds&&i.liveMap.fitBounds(i.liveBounds)},initMap:r,styles:o,addRouteTrackToMap:function(t,e){t&&$.ajax({type:"GET",url:"/routes/"+t,success:function(t){var a=[],s=new google.maps.Map(e[0],{zoom:8,maxZoom:16});s.set("styles",o);var n=new google.maps.LatLngBounds;t.gps.forEach(function(t){var e=t.lat,s=t.lon,i=new google.maps.LatLng(e,s);a.push(i),n.extend(i)}),l(a).setMap(s),s.fitBounds(n)}})},addGpxTrackToMap:d,loadGpxMap:function(){var t=$(this).data("name"),e=$(this).find(".card-map-top");d(t,e)},createPolyLine:l};var u={leaderboard:function(t,e){$.get("/strava/route/leaderboard/"+t,function(t){e(t)})},segment:function(t,e){$.get("/strava/route/"+t,function(t){e.apply(t)})}};const p=100/4.805*6,v=10;var f={RATION:p,PAGE_SIZE:v,UPDATE_FREQ:1e3,run:!1};var m={addGraph:function(t,e,a,s){for(var i=[],o=[],r=[],l=1,d=1;d<t.length;d++){var c=parseInt(t[d]),u=parseInt(s[l]),v=(c-a)/1e3,f=p/100;i.push(f/v*3.6);var m=n.calcWatt(v/f);o.push(m),r.push(6e4/(u-parseInt(s[l-1]))),a=parseInt(t[d]),c>u&&l++}var h=[],g=[],y=[],b=[],w=[],x=10;for(t.length>1e3&&(x=20);t.length;){var I,S=t.splice(0,x),k=parseInt(S.reduce(function(t,e){return t+e})/S.length);if(w.push(new Date(k).toISOString().substr(new Date(k).toISOString().lastIndexOf("T")+1,8)),e&&(I=e.splice(0,x)).length>0&&g.push(parseInt(I.reduce(function(t,e){return t+e})/I.length)),r&&(I=r.splice(0,x)).length>0&&b.push(Math.round(10*parseFloat(I.reduce(function(t,e){return t+e})/I.length))/10),i){var R=i.splice(0,x),M=o.splice(0,x);R.length>0&&h.push(Math.round(10*parseFloat(R.reduce(function(t,e){return t+e})/R.length))/10),M.length>0&&y.push(Math.round(10*parseFloat(M.reduce(function(t,e){return t+e})/M.length))/10)}}var T=$("#hr-graph"),D={labels:w,datasets:[{label:"Heart rate (bpm)",borderColor:"#dc3545",backgroundColor:"#dc3545",fill:!1,data:g,yAxisID:"y-axis-1"},{label:"Speed (km/t)",borderColor:"#007bff",backgroundColor:"#007bff",fill:!1,data:h,yAxisID:"y-axis-2"},{label:"Watt",borderColor:"#4bc0c0",backgroundColor:"#4bc0c0",fill:!1,data:y,lineTension:0,yAxisID:"y-axis-3"},{label:"Stroke rate (spm)",borderColor:"#9966FF",backgroundColor:"#9966FF",fill:!1,data:b,yAxisID:"y-axis-4"}]};Chart.Line(T,{data:D,options:{responsive:!0,hoverMode:"index",stacked:!1,scales:{yAxes:[{type:"linear",display:!0,position:"left",id:"y-axis-1",ticks:{suggestedMin:30,min:0,stepSize:5}},{type:"linear",display:!0,position:"right",id:"y-axis-2",ticks:{stepSize:2},gridLines:{drawOnChartArea:!1}},{type:"linear",display:!0,position:"right",id:"y-axis-3",ticks:{stepSize:25},gridLines:{drawOnChartArea:!1}},{type:"linear",display:!0,position:"right",id:"y-axis-4",ticks:{stepSize:2,suggestedMin:10},gridLines:{drawOnChartArea:!1}}]}}})}},h=function(t,e,a){return t+="<tr>",t+='<th scope="row">'+(e+1)+"</th>",t+='<td><a class="route-detail" data-route-name="'+a.name+'" href="?route='+a.name+'#routedetail">'+a.name+"</a></td>",t+="<td>"+parseInt(a.meters)+"m</td>",t+="<td>"+a.country+"</td>",t+="<td>",!0!==a.permanent?t+='<a class="edit-route" href="#" data-id="'+a.name+'"><i class="material-icons">create</i></a><a class="del-route" href="#" data-id="'+a.name+'"><i aria-hidden="true" title="Delete route" class="material-icons">delete</i></a></td>':t+="<i>Default</i>",t+="</tr>"};function g(t){$("#load").load("/route",function(){$(this).find("#routes-t").each(function(){b(0),y($("#routes-table").find(".page")[0],t)})})}function y(t,e){var a=$('<ul id="route-page" data-index="'+e+'"></ul>').addClass("pagination pagination-lg");$.get("routes/size",function(s){var n=parseInt(parseInt(s)/v)+1,i=e===n-1?"disabled":"",o=$('<li class="page-item '+(0===e?"disabled":"")+'"></li>').append('<a class="page-link" href="#" data-next="-1" tabindex="-1">Previous</a>'),r=$('<li class="page-item '+i+'"></li>').append('<a class="page-link" data-next="1" href="#">Next</a>');a.append(o);for(var l=0;l<n;l++){var d="";e===l&&(d="active");var c=$('<li class="page-item '+d+'"><a class="page-link" data-index="'+l+'" href="#">'+(l+1)+"</a></li>");a.append(c)}a.append(r),$(t).html(a)})}function b(t){var e=t*v,a=(t+1)*v-1;$.get("/routes/"+e+"/"+a,function(e){var a="",s=0;e.forEach(function(e){a=h(a,s+t*v,e),s++}),$("#routes-table-body").html(a),$("#add-route-modal").on("hidden.bs.modal",function(t){g(0)})})}function w(){var t=$("#routes").find(":selected");c.cleanMap();var e=t.data("name");c.addRouteTrackToMap(e,$("#live-map"))}function x(t){$("#load").load("/route/details",function(){c.cleanMap();var e=function(t){var e="";t.entries&&t.entries.forEach(function(t){e+='<tr> <th scope="row"> '+t.athlete_name+" </th><td> "+n.fmtMSS(parseInt(t.moving_time))+"</td> <td>"+t.start_date+"</td></tr>"});this.html(e)}.bind($(this).find("#strava-result"));u.leaderboard(t,e),c.addRouteTrackToMap(t,$("#live-map")),$(this).find("#route-stats").each(function(t){var e=this;$.ajax({url:"/routes/"+t,type:"GET",success:function(t){let a='<div class="card card-default"><div class="card-body"><div class="row">';a+='<div class="col-md-5"><div class="statistic"><div class="value">'+t.name+'</div><div class="label">Name</div></div></div>',a+='<div class="col-md-2"><div class="statistic"><div class="value">'+t.meters+'</div><div class="label">Lenght (m)</div></div></div>',a+='<div class="col-md-5"><div class="statistic"><div class="value">'+t.country+'</div><div class="label">Country</div></div></div>',a+="</div></div></div>",$(e).find("#route-stats").html(a)}})}.bind(this,t)),$(this).find("#strava-result").each(route.loadRoutes)})}var I={loadRoutes:function(){var t=this;$.get("/row/routes",function(e){var a="",s="";e.sort(function(t,e){return t.country>e.country?1:e.country>t.country?-1:0});var n='selected="selected"';e.forEach(function(t){t.country!==s&&(a+='<optgroup label="'+t.country+'">',s=t.country),a+="<option "+n+' value="'+t.index+'" data-name="'+t.name+'" data-lat="'+t.gps[0].lat+'" data-lon="'+t.gps[0].lon+'">'+t.name+" ("+t.meters+"m)</option>",n=""}),$(t).html(a),w()})},createRouteRecord:h,loadRoute:g,loadRouteTable:b,createRouteNavPage:y,editRoute:function(t){t.preventDefault();var e=$(this).data("id");$.ajax({url:"/routes/"+e,type:"GET",success:function(t){var e=$("#addRoute");e.find("#name").val(t.name),e.find("#meters").val(t.meters),e.find("#segmentId").val(t.segmentId),e.find("#countries").val(t.country);var a=JSON.stringify(t.gps);e.find("#gps").append(a),$("#add-route-modal").modal("show")}})},showRouteModal:function(t){var e=$(t.relatedTarget).data("route-name"),a=$(this);$.get("/routes/"+e,function(t){var e=t.name;t.segementId&&(e='<a class="strava-segment" target="_blank" href="https://www.strava.com/segments/'+t.segementId+' title="Strava Segment Url" ">'+e+" </a>"),a.find("#show-route-modal-title").html(e);var s='<li class="list-group-item"><h5 class="card-title">Display Lenght:</h5>'+t.meters+" m</li>";s+='<li class="list-group-item"><h5 class="card-title">Gps Lenght:</h5>'+t.gpsLenght+" m</li>",s+='<li class="list-group-item"><h5 class="card-title">Country:</h5>'+t.country+"</li>",a.find(".card .list-group").html(s)})},changeRouteSelect:w,deleteRoute:function(t){t.preventDefault();var e=$(this).data("id");confirm("Are you sure you want to delete route?")&&$.ajax({url:"/routes/"+e,type:"DELETE",success:function(t){route.loadRoute(0)}})},saveRoute:function(t){t.preventDefault();var e=$("#addRoute"),a={};a.name=e.find("#name").val(),a.meters=e.find("#meters").val(),a.stravaId=e.find("#segmentId").val(),a.country=e.find("#countries").val(),a.gps=e.find("textarea").val(),$.ajax({type:"PUT",contentType:"application/json",dataType:"json",url:"/routes/add",data:JSON.stringify(a),success:function(){$("#add-route-modal").modal("hide")}})},openRoute:function(t){t.preventDefault();var e=parseInt($(this).data("next")),a=parseInt($(this).data("index")),s=parseInt($("#route-page").data("index"));isNaN(e)?isNaN(a)||(s=a):s+=e,y($("#routes-table").find(".page")[0],s),b(s)},loadRouteDetail:x,clickRouteDetail:function(t){t.preventDefault(),x($(this).data("route-name"))}};var S={loadUsers:function(){var t=this;$.get("/users",function(e){var a="";e.forEach(function(t){a+='<option value="'+t.id+'">'+t.firstName+" "+t.lastName+"</option>"}),$(t).html(a)})},loadUser:function t(){$("#load").load("/user",function(){$(this).find("#users-body").each(function(){var e=this;$.get("/users/",function(a){for(var s="",n=0;n<a.length;n++){var i=a[n];s+='<tr><td><a href="#" data-toggle="modal" data-target="#userStatsModal" data-id="'+i.id+'">'+(n+1)+"</a></td><td>"+i.firstName+"</td><td>"+i.lastName+"</td>",s+='<td><a class="edit-user" href="#" data-id="'+i.id+'"><i class="material-icons">create</i></a><a class="del-user" href="#" data-id="'+i.id+'"><i aria-hidden="true" title="Delete user" class="material-icons">delete</i></a></td></tr>'}$(e).html(s),$("#addUserModal").on("hidden.bs.modal",function(e){t()})})})})},editUser:function(t){t.preventDefault();var e=$(this).data("id");$.ajax({url:"/users/"+e,type:"GET",success:function(t){var e=$("#addUserForm");e.find("#firstName").val(t.firstName),e.find("#lastName").val(t.lastName),e.find("#userId").val(t.id),$.get("/strava/url",function(e){var a=e.url.replace("%24",t.id);$(".strava-url").attr("href",a)}),$(".strava-connect").removeClass("sr-only"),$("#addUserModal").modal("show")}})},saveUser:function(t){t.preventDefault();var e=$("#addUserForm"),a=e.find("#firstName").val(),s=e.find("#lastName").val(),n=e.find("#userId").val(),i={};i.firstName=a,i.lastName=s,i.id=n,$.ajax({type:"PUT",contentType:"application/json",dataType:"json",url:"/users/add",data:JSON.stringify(i),success:function(){$("#addUserModal").modal("hide")}})},deleteUser:function(t){t.preventDefault();var e=$(this).data("id");confirm("Are you sure you want to delete?")&&$.ajax({url:"/users/"+e,type:"DELETE",success:function(t){user.loadUser()}})}};function k(t){$("#load").load("/history",function(){$(this).find("#history").each(function(){$.get("/session/0/2",function(t){var e="";t.forEach(function(t){e=M(e,t)}),$("#cards").html('<div class="col"><div class="card-deck">'+e+"</div></div>"),$(".gpx-track").each(function(){$(this).trigger("load-map",this)})}),R($(this),t)})})}function R(t,e){var a=e*v,s=(e+1)*v-1;$.get("/session/"+a+"/"+s,function(a){$.get("/users",function(s){var n="",i=0,o=s.reduce(function(t,e){return t[e.id]=e,t},{});a.forEach(function(t){n=T(n,i+e*v,t,o),i++}),$("#histor-table-body").html(n),function(t,e){var a=$('<ul id="history-page" data-index="'+e+'"></ul>').addClass("pagination pagination-lg");$.get("session/size",function(s){var n=parseInt(parseInt(s)/v)+1,i=0===e?"disabled":"",o=e===n-1?"disabled":"",r=$('<li class="page-item '+i+'"></li>').append('<a class="page-link" href="#" data-next="-1" tabindex="-1">Previous</a>'),l=$('<li class="page-item '+o+'"></li>').append('<a class="page-link" data-next="1" href="#">Next</a>');a.append(r);for(var d=0;d<n;d++){var c="";e===d&&(c="active");var u=$('<li class="page-item '+c+'"><a class="page-link" data-index="'+d+'" href="#">'+(d+1)+"</a></li>");a.append(u)}a.append(l),$(t).html(a)})}(t.find(".page"),e)})})}var M=function(t,e){return t+='<div class="card gpx-track" data-name="'+e.name+'"">',t+='<div class="card-body">',t+='<div class="card-map-top "></div>',t+='<h5 class="card-title mt-2"><a class="sessions" data-name="'+e.name+'" href="/session">'+n.sessionNameToReadable(e.name)+"</a></h5>",t+='<p class="card-text">Length: '+parseInt(e.endStats.meters)+"m, Time: "+n.fmtMSS(parseInt(e.endStats.seconds))+"</p>",t+='<a href="/strava/upload/'+e.name+'" class="btn btn-primary strava btn-block">Upload to Strava</a>',t+="</div>",t+="</div>"},T=function(t,e,a,s){var i=s[a.user];return t+="<tr>",t+='<th scope="row">'+(e+1)+"</th>",t+='<td><a class="sessions" data-name="'+a.name+'" href="/?name='+a.name+'#session">'+n.sessionNameToReadable(a.name)+"</a></td>",t+="<td>Length: "+parseInt(a.endStats.meters)+"m</td>",t+=i?"<td>"+i.firstName+" "+i.lastName+"</td>":"<td></td>",t+='<td> <a href="/sessions/'+a.name+'.gpx"><i class="material-icons md-36">file_download</i><a class="strava" href="/strava/upload/'+a.name+'"><i aria-hidden="true" title="Upload to Strava" class="material-icons md-36 strava-icon">cloud_upload</i></a> <a class="del-session" href="#" data-name="'+a.name+'"><i aria-hidden="true" title="Delete session local" class="material-icons md-36">delete</i></a></td>',t+="</tr>"};var D={loadHistoryIndex:function(t){k(t)},loadHistory:k,loadHistoryList:R,openHistory:function(t){t.preventDefault();var e=parseInt($(this).data("next")),a=parseInt($(this).data("index")),s=parseInt($("#history-page").data("index"));isNaN(e)?isNaN(a)||(s=a):s+=e,R($("#history-table"),s)}};function U(t){$("#load").load("/sessions",function(){$(this).find("#routes").each(I.loadRoutes),$(this).find("#session-user").each(S.loadUsers),$(this).find("#history-session").each(function(){$.get("/session/"+t,function(e){var a=j.getHtml("History",e.endStats,!0);$("#routes").val(e.route),$("#session-user").val(e.user),a&&($("#table-content").html(a),$("#laps-body").html(N("History",e.endStats)),c.addGpxTrackToMap(t,$("#live-map"))),m.addGraph(e.raw,e.rawHr,parseInt(e.start),e.stroke)})})})}function N(t,e,a){var s="";if(parseInt(e.totalLaps)>0){var i=1,o=e.laps;a&&(o.reverse(),i=o.length),o.forEach(function(t){s+='<tr><th scope="row">'+i+"</th><td>"+parseInt(t.meters)+"</td><td>"+n.fmtMSS(parseInt(t.seconds))+"</td>",s+="<td>"+Math.round(10*parseFloat(t.watt))/10+"w</td></tr>",a?i--:i++})}return s}var C,L={loadSession:U,clickSession:function(t){t.preventDefault(),U($(this).data("name"))},getLapHtml:N,deleteSession:function(t){t.preventDefault();var e=$(this).data("name");confirm("Are you sure you want to delete session?")&&$.ajax({url:"/session/del/"+e,type:"DELETE",success:function(t){alert("Session deleted"),D.loadHistoryIndex(0,0)}})}};function E(){$("#load").load("/main",function(){$(this).find("#routes").each(I.loadRoutes),$(this).find("#session-user").each(S.loadUsers),$.get("/row/status",function(t){if("ROWING"===t.status){var e=$("#startRow");n.getUrlParameter("test")&&(e=$("#startSimulator")),P(e)}}),n.getUrlParameter("test")&&$("#startRow").attr("id","startSimulator")})}function P(t){$(window).scrollTop($("#main").offset().top),A(!0,"Rowing"),c.cleanMap(),$("#routes").attr("disabled","disabled"),$("#session-user").attr("disabled","disabled"),$("#startSimulator").attr("disabled","disabled"),$(t).attr("disabled","disabled"),$(t).html("Rowing..."),$(t).addClass("d-none"),$("#stopRow").removeClass("d-none")}function A(t,e){f.run=t,$.get("/row",function(t){var a=O(e,t);if(a){$("#table-content").html(a),$("#laps-body").html(L.getLapHtml(e,t,!0));var s=t.gps.lat,n=t.gps.lon,o=new google.maps.LatLng(s,n);if(i.livePoints.push(o),i.liveBounds)i.liveBounds.extend(o),c.createPolyLine(i.livePoints).setMap(i.liveMap),i.liveMap.fitBounds(i.liveBounds)}}).done(function(){f.run&&(C=setTimeout(function(){A(!0,e)},f.UPDATE_FREQ))})}function O(t,e,a){if(0!==parseInt(e.meters)){var s="";return a&&(s+='<div class="row"><div class="col-sm-4">Day</div><div class="col">'+e.start.substr(2,e.start.lastIndexOf("T")-2)+"</div></div>"),s+='<div class="row"><div class="col-sm-4">Start:</div><div class="col">'+e.start.substr(e.start.lastIndexOf("T")+1,8)+"</div></div>",s+='<div class="row"><div class="col-sm-4">Time:</div><div class="col">'+n.fmtMSS(parseInt(e.seconds))+"</div></div>",s+='<div class="row"><div class="col-sm-4">Length:</div><div class="col">'+parseInt(e.meters)+" m ("+parseInt(e.routeLap)+")</div></div>",s+='<div class="row"><div class="col-sm-4">Pace:</div><div class="col">'+Math.round(3.6*parseFloat(e.pace)*10)/10+" km/t</div></div>",s+='<div class="row"><div class="col-sm-4">500m:</div><div class="col">'+n.fmtMSS(parseInt(e.lapPace))+"</div></div>",s+='<div class="row"><div class="col-sm-4">2k:</div><div class="col">'+n.fmtMSS(parseInt(e.towKPace))+"</div></div>",s+='<div class="row"><div class="col-sm-4">Avg.W:</div><div class="col">'+Math.round(10*parseFloat(e.watt))/10+"w</div></div>",s+='<div class="row"><div class="col-sm-4">SR:</div><div class="col">'+Math.round(10*parseFloat(e.stroke))/10+"</div></div>",parseInt(e.hr)>0&&(s+='<div class="row"><div class="col-sm-4">HR:</div><div class="col '+n.getHeartRateColor(parseInt(e.hr))+'">'+parseInt(e.hr)+(parseInt(e.avgHr)>0?"("+parseInt(e.avgHr)+")":"")+"</div></div>"),e.fileName&&(s+='<div class="row"><div class="col-sm-4">Actions:</div><div class="col"><a href="/sessions/'+e.fileName,s+='"><i class="material-icons">file_download</i><a class="strava" href="/strava/upload/'+e.name,s+='"><i aria-hidden="true" title="Upload to strava" class="material-icons">cloud_upload</i></a>',s+='<a class="sessions" data-name="'+e.name+'" href="/sessions"><i aria-hidden="true" title="Session" class="material-icons">fiber_new</i></a></div></div>'),s+""}}var j={loadMain:E,start:P,get_rowInfo:A,getHtml:O,startRow:function(t){t.preventDefault();var e=$("#routes").val(),a=this;$.get("/row/start",{routes:e},function(){P(a)})},stopRow:function(t){t.preventDefault();var e=$(this);clearTimeout(C),f.run=!1;var a=$("#routes").val(),s=$("#session-user").val();$.get("/row/stop",{routes:a,user:s},function(t){$("#table-content").html(O(0,t,!1));var a=$("#startRow");a.removeAttr("disabled"),a.removeClass("d-none"),a.html("Start row"),e.addClass("d-none"),$("#routes").removeAttr("disabled"),$("#session-user").removeAttr("disabled"),$("#startSimulator").removeAttr("disabled")})},load:function(){switch(window.location.hash){case"#route":I.loadRoute(0);break;case"#user":S.loadUser();break;case"#history":D.loadHistory(0);break;case"#session":L.loadSession(n.QueryString(window.location.href).name);break;case"#routedetail":I.loadRouteDetail(n.QueryString(window.location.href).route);break;default:E()}},uploadToStrava:function(t){t.preventDefault();var e=$(this).attr("href");$.get(e,function(t){console.log(t),alert("Uploaded to strava!")})}};window.QueryString=function(){for(var t={},e=window.location.search.substring(1).split("&"),a=0;a<e.length;a++){var s=e[a].split("=");if(void 0===t[s[0]])t[s[0]]=decodeURIComponent(s[1]);else if("string"==typeof t[s[0]]){var n=[t[s[0]],decodeURIComponent(s[1])];t[s[0]]=n}else t[s[0]].push(decodeURIComponent(s[1]))}return t}(),$(function(){j.get_rowInfo(!1,""),$(document).on("click",".main",function(t){j.loadMain()}),$(document).on("click","#user",function(t){S.loadUser()}),$(document).on("click","#history-page a",D.openHistory),$(document).on("click","#route-page a",I.openRoute),$(document).on("click",".nav-link",function(t){$("#main-nav").find(".nav-item").each(function(){$(this).removeClass("active")}),$(this).parent().addClass("active")}),$(document).on("click",".sessions",L.clickSession),$(document).on("click","a#history",function(t){D.loadHistoryIndex(0,0)}),$(document).on("click","a#route",function(t){I.loadRoute(0)}),$(document).on("load-map",".gpx-track",c.loadGpxMap),$(document).on("click","button#startRow",j.startRow),$(document).on("click","button#stopRow",j.stopRow),$(document).on("click",".edit-user",S.editUser),$(document).on("click",".edit-route",I.editRoute),$(document).on("click",".strava",j.uploadToStrava),$(document).on("click",".del-session",L.deleteSession),$(document).on("click","#save-route",I.saveRoute),$(document).on("click","#save-user",S.saveUser),$(document).on("click",".del-user",S.deleteUser),$(document).on("click",".del-route",I.deleteRoute),$(document).on("click",".route-detail",I.clickRouteDetail),$("#load").each(j.load),$("#routes").each(I.loadRoutes),$("#session-user").each(S.loadUsers),$(document).on("show.bs.modal","#show-route-modal",I.showRouteModal),$(document).on("shown.bs.modal","#show-route-modal",function(t){var e=$(t.relatedTarget).data("route-name");c.addRouteTrackToMap(e,$("#live-route-map"))}),$(document).on("change","#routes",I.changeRouteSelect)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,